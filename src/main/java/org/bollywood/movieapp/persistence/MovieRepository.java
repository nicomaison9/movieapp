package org.bollywood.movieapp.persistence;

import java.util.List;
import java.util.Optional;

import org.bollywood.movieapp.dto.MovieStat;
import org.bollywood.movieapp.entity.Movie;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

//integer en fonction du nombre d'éléments à gérer
//long si besoin de d'avantage d'éléments
//by default use database in memory H2
//query auto generated by spring 
//https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation
public interface MovieRepository extends JpaRepository<Movie, Integer>{
//	select movie0_.id as id1_0_, movie0_.duration as duration2_0_, movie0_.title as title3_0_, movie0_.year as year4_0_ 
//	from movie movie0_ where movie0_.title=?
List<Movie> findByTitle(String title);
//List<Movie> findByDirector(String title);  // pas possible de l'utiliser car il est transcient, donc pas mappé avec la base de données

//  select movie0_.id as id1_0_, movie0_.duration as duration2_0_, movie0_.title as title3_0_, movie0_.year as year4_0_ 
//  from movie movie0_ where upper(movie0_.title) like upper(?) escape ?
List<Movie> findByTitleContainingIgnoreCase(String title);

List<Movie> findByYearOrderByTitle(int year);


//where year >= 2000
//select movie0_.id as id1_0_, movie0_.duration as duration2_0_, movie0_.title as title3_0_, movie0_.year as year4_0_ 
//from movie movie0_ where movie0_.year>=?
List<Movie> findByYearGreaterThanEqual(int year);

//where year between 2000 and 2009
//select movie0_.id as id1_0_, movie0_.duration as duration2_0_, movie0_.title as title3_0_, movie0_.year as year4_0_ 
//from movie movie0_ where movie0_.year between ? and ?
List<Movie> findByYearBetweenOrderByTitleAsc(int year1,int year2);
List<Movie> findByYearBetweenOrderByYear(int year1,int year2,Sort sort);
List<Movie> findByYearBetween(int yearmin, int yearmax, Sort by);


//where title = 'the lion king' and year =1994
//select movie0_.id as id1_0_, movie0_.duration as duration2_0_, movie0_.title as title3_0_, movie0_.year as year4_0_ 
//from movie movie0_ where (movie0_.title like ? escape ?) and movie0_.year=?
List<Movie> findByTitleContainingAndYearEquals(String title,int year);

//where duration is null
//select movie0_.id as id1_0_, movie0_.duration as duration2_0_, movie0_.title as title3_0_, movie0_.year as year4_0_ 
//from movie movie0_ where movie0_.duration is null
List<Movie> findByDurationNull();

List<Movie> findByDirectorName(String name);

List<Movie> findByActorsName(String name);


@Query("select coalesce(sum(m.duration),0) from Movie m where m.year between ?1 and ?2")
Long totalDuration(int yearmin, int yearmax);

@Query("select avg(m.duration) from Movie m where m.year between :yearmin and :yearmax")
Optional<Double> averageDuration(int yearmin, int yearmax);

@Query("select new org.bollywood.movieapp.dto.MovieStat(count(*),min(m.year), max(m.year)) from Movie m")
MovieStat statistics();


}